<?php
//$Id$

/**
 * @file
 * Módulo Forcontu Test Project
 */

/**
 * Implements hook_node_info().
 */
function forcontu_test_project_node_info() {
  return array(
    'myproduct' => array(
      'name' => t('My product'),
      'base' => 'forcontu_test_project',
      'description' => t('Example node type.'),
      'title_label' => t('Product name'),
    )
  );
}


/**
 * Implements hook_form().
 */
function forcontu_test_project_form($node, &$form_state) {
  
  $type = node_type_get_type($node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
	    '#default_value' => !empty($node->title) ? $node->title : '', 
      '#maxlength' => 255,
      '#weight' => -5
    );
  }
  
  $form['information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product information'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 99,
    '#group' => 'additional_settings'
  );

  $form['information']['price'] = array(
    '#type' => 'textfield',
    '#title' => t('Price'),
    '#required' => FALSE,
    '#default_value' => isset($node->price) ? $node->price : 0,
    '#description' => t("Product's price (Euro)."),
    '#weight' => 1,
    '#size' => 20,
    '#maxlength' => 35,
  );

  $form['information']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => isset($node->weight) ? $node->weight : 0,
    '#description' => t("Product's weight (Kg)."),
    '#weight' => 2,
    '#size' => 10,
    '#maxlength' => 15,
  );

  $form['information']['dimensions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dimensions'),
    '#description' => t('Physical dimensions of the packaged product (cm).'),
    '#weight' => 3,
  );

  $form['information']['dimensions']['length'] = array(
    '#type' => 'textfield',
    '#title' => t('Length'),
    '#default_value' => isset($node->length) ? $node->length : '',
    '#weight' => 1,
    '#size' => 10,
  );

  $form['information']['dimensions']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => isset($node->width) ? $node->width : '',
    '#weight' => 2,
    '#size' => 10,
  );

  $form['information']['dimensions']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => isset($node->height) ? $node->height : '',
    '#weight' => 3,
    '#size' => 10,
  );
  return $form;
}




/**
 * Implements hook_insert().
 *
 */
function forcontu_test_project_insert($node) {

  db_insert('forcontu_test_project')
    ->fields(array(
      'nid' => $node->nid, 
      'price' => $node->price,
      'weight' => $node->weight,
      'length' => $node->length,
      'width' => $node->width,
      'height' => $node->height,      
    ))
    ->execute();
}



/**
 * Implements hook_update().
 */
function forcontu_test_project_update($node) {

  db_update('forcontu_test_project')
    ->fields(array(
      'price' => $node->price,
      'weight' => $node->weight,
      'length' => $node->length,
      'width' => $node->width,
      'height' => $node->height,      
    ))
    ->condition('nid', $node->nid)
    ->execute();
}



/**
 * Implements hook_delete().
 */
function forcontu_test_project_delete($node) {

  db_delete('forcontu_test_project')
    ->condition('nid', $node->nid)
    ->execute();
}


/**
 * Implements hook_load().
 */
function forcontu_test_project_load($nodes) {
  $result = db_query('SELECT nid, price, weight, length, width, height FROM {forcontu_test_project} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  
  foreach ($result as $record) {
    $nodes[$record->nid]->price = $record->price;
    $nodes[$record->nid]->weight = $record->weight;
    $nodes[$record->nid]->length = $record->length;
    $nodes[$record->nid]->width = $record->width;
    $nodes[$record->nid]->height = $record->height;
  }
}

  
/**
 * Implements hook_validate().
 */
function forcontu_test_project_validate($node, $form, &$form_state){
  
  
  $pattern = '/^\d*(\.\d*)?$/';
  
  if (!empty($node->price) && !is_numeric($node->price) && !preg_match($pattern, $node->price)) {
    form_set_error('price', t('Price must be in a valid number format. No commas and only one decimal point.'));
  }

  if (!empty($node->weight) && (!is_numeric($node->weight) || $node->weight < 0)) {
    form_set_error('weight', t('Weight must be a positive number.'));
  }

  if (!empty($node->length) && (!is_numeric($node->length) || $node->length < 0)) {
    form_set_error('length', t('Length must be a positive number.'));
  }

  if (!empty($node->width) && (!is_numeric($node->width) || $node->width < 0)) {
    form_set_error('width', t('Width must be a positive number.'));
  }
  
  if (!empty($node->height) && (!is_numeric($node->height) || $node->height < 0)) {
    form_set_error('height', t('Height must be a positive number.'));
  }
  
}  



/**
 * Implements hook_view().
 */
function forcontu_test_project_view($node, $view_mode) {
  
  $node->content['price'] = array(
    '#markup' => theme('forcontu_test_project_price', $node->price), 
    '#weight' => 1,
  );

  $node->content['weight'] = array(
    '#markup' => theme('forcontu_test_project_weight', $node->weight), 
    '#weight' => 2,
  );
  
  $node->content['dimensions'] = array(
    '#markup' => theme('forcontu_test_project_dimensions', array('length' => $node->length, 'width' => $node->width, 'height' => $node->height)),    
    '#weight' => 3,
  );
  
  return $node;
}


/**
 * Implements hook_theme().
 */
function forcontu_test_project_theme($existing, $type, $theme, $path) {
  return array(
    'forcontu_test_project_price' => array(
      'variables' => array('price' => 0),
    ),
    'forcontu_test_project_weight' => array(
      'variables' => array('weight' => 0),
    ),
    'forcontu_test_project_dimensions' => array(
      'variables' => array('length' => 0, 'width' => 0, 'height' => 0),
    ), 
  );
}

/**
 * Devuelve la salida HTML para el elemento Precio.
 *
 * @param $variables
 *   An associative array containing:
 *   - price: precio en euros.
 *
 * @ingroup themeable
 */
function theme_forcontu_test_project_price($variables){
  $output = '<div class="product-price">';
  $output .= t('Price') . ': ' . $variables['price'] . ' €';
  $output .= '</div>';
  return $output;
}

/**
 * Devuelve la salida HTML para el elemento Peso.
 *
 * @param $variables
 *   An associative array containing:
 *   - peso: peso en kg.
 *
 * @ingroup themeable
 */
function theme_forcontu_test_project_weight($variables){
  $output = '<div class="product-weight">';
  $output .= t('Weight') . ': ' . $variables['weight'] . ' Kg.';
  $output .= '</div>';
  return $output;
}

/**
 * Devuelve la salida HTML con las Dimensiones (Largo x Ancho x Alto).
 *
 * @param $variables
 *   An associative array containing:
 *   - length: largo (cm).
 *   - width: ancho (cm).
 *   - height: alto (cm).
 *
 * @ingroup themeable
 */
function theme_forcontu_test_project_dimensions($variables){
  $output = '<div class="product-dimensions">';
  $output .= t('Dimensions (length x width x height)') . ': ' . $variables['length'] . 'x' . $variables['width'] . 'x' . $variables['height'] . ' cm.'   ;
  $output .= '</div>';
  return $output;
}


/**
 * Implements hook_node_access().
 */
function forcontu_test_project_node_access($node, $op, $account) {
  
  //no se pueden eliminar los nodos promocionados a la página principal
  if($op == 'delete' && $node->promote == 1){
    drupal_set_message(t('No se pueden eliminar los nodos promocionados a la página principal.'));
    return NODE_ACCESS_DENY;  
  }
  
  return NODE_ACCESS_IGNORE;
}
